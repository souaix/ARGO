
#!/usr/bin/env python
# coding: utf-8

# In[1]:


# pandas
# import sys
# print(sys.path)
# input('123')
import pandas as pd

# numpy
import numpy as np

# datetime
import datetime
import time

# connector
import sys
import connect.connect as cc


# In[2]:

# 每8/17點更新前24hour VIEW_YBR_A076_SAP

now = datetime.datetime.now()
hh = now.hour
mm = now.minute
update_time = now.strftime("%Y-%m-%d %H") + ":00:00"

now_hour = now.strftime("%Y-%m-%d %H") + ":00:00.000"
last_hour = now + datetime.timedelta(hours=-72)
last_hour = last_hour.strftime("%Y-%m-%d %H") + ":00:00.000"

if (hh == 8 or hh == 17) and mm >=20:

    engine_mes = cc.connect('MES', 'MES_Production')
    engine_cim_ybr = cc.connect('xxx', 'xxx')

    sql = "SELECT `update_time`, `file` FROM `log`.`mes_update` WHERE `update_time` = '" + update_time + "' AND `file` = 'YBR_A076' limit 1"

    df_log = pd.read_sql_query(sql, engine_cim_ybr)

    #已有 log 的話停止程式    
    if len(df_log)>0 :
        print(update_time + " 已更新過")

    else:

        # 抓取 VIEW_YBR_A076
        sql = "EXECUTE YBR_A076 @STARTTIME='"+last_hour+"',@ENDTIME='"+now_hour+"'"

        df_ybr_a076 = pd.read_sql_query(sql, engine_mes)

        try:

            #有資料才執行
            if len(df_ybr_a076) > 0 :

                df_ybr_a076['FGDINDATE']=df_ybr_a076['FGDINDATE'].astype('datetime64[ns]')

                # 計算各defect比率
                df_ybr_a076['F00_P']=round(df_ybr_a076['F00']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F06_P']=round(df_ybr_a076['F06']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F07_P']=round(df_ybr_a076['F07']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F13_P']=round(df_ybr_a076['F13']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F16_P']=round(df_ybr_a076['F16']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F17_P']=round(df_ybr_a076['F17']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F19_P']=round(df_ybr_a076['F19']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F28_P']=round(df_ybr_a076['F28']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F29_P']=round(df_ybr_a076['F29']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F31_P']=round(df_ybr_a076['F31']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F33_P']=round(df_ybr_a076['F33']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F38_P']=round(df_ybr_a076['F38']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F58_P']=round(df_ybr_a076['F58']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F81_P']=round(df_ybr_a076['F81']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F82_P']=round(df_ybr_a076['F82']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F83_P']=round(df_ybr_a076['F83']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F84_P']=round(df_ybr_a076['F84']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['F99_P']=round(df_ybr_a076['F99']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['T_P']=round(df_ybr_a076['T']/df_ybr_a076['overall_InputQty']*100,3)
                df_ybr_a076['YAR_MAX']=df_ybr_a076['overall_GoodQty']/df_ybr_a076['overall_InputQty']


                #加上更新時間
                df_ybr_a076['date']=update_time
                df_ybr_a076['date']=df_ybr_a076['date'].astype('datetime64')

                df_ybr_a076.to_sql('view_ybr_temp_a076', con=engine_cim_ybr, if_exists='replace', index=False)

                sql = "REPLACE INTO `view_ybr_a076` (SELECT * FROM `view_ybr_temp_a076`)"
                engine_cim_ybr.execute(sql)

        except:
            print('NO A076 YBR')


    engine_cim_ybr.dispose()
    engine_mes.dispose()
